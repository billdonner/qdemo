
// isPossiblePath Function Implementation
func isPossiblePath(_ linearArray: [ChallengeOutcomes]) -> Bool {

    guard let outcomeMatrix = toSquareArray(linearArray) else {
        print("Could not convert array to square")
        return false
    }

    let n = outcomeMatrix.count
    var visited = Array(repeating: Array(repeating: false, count: n), count: n)
    let validOutcomes = [ChallengeOutcomes.playedCorrectly, ChallengeOutcomes.unplayed]

    func isValid(x: Int, y: Int) -> Bool {
        if x < 0 || y < 0 || x >= n || y >= n || !validOutcomes.contains(outcomeMatrix[x][y]) || visited[x][y] {
            return false
        }
        if x == n - 1 && y == n - 1 { return true }

        visited[x][y] = true
        let dx = [0, 1, 0, -1, -1, -1, 1, 1] // Include diagonal movements
        let dy = [1, 0, -1, 0, -1, 1, -1, 1] // Include diagonal movements

        for i in 0...7 {
            if isValid(x: x + dx[i], y: y + dy[i]) {
                return true
            }
        }
        return false
    }

    return isValid(x: 0, y: n - 1) // Start from upper right
}

// doesPathExistNow Function Implementation
func doesPathExistNow(_ linearArray: [ChallengeOutcomes]) -> Bool {
    
    guard let outcomeMatrix = toSquareArray(linearArray) else {
        print("Could not convert array to square")
        return false
    }

    let n = outcomeMatrix.count
    var visited = Array(repeating: Array(repeating: false, count: n), count: n)

    func isValid(x: Int, y: Int) -> Bool {
        if x < 0 || y < 0 || x >= n || y >= n || outcomeMatrix[x][y] != .playedCorrectly || visited[x][y] {
            return false
        }
        if x == n - 1 && y == n - 1 { return true }

        visited[x][y] = true
        let dx = [0, 1, 0, -1, -1, -1, 1, 1] // Include diagonal movements
        let dy = [1, 0, -1, 0, -1, 1, -1, 1] // Include diagonal movements

        for i in 0...7 {
            if isValid(x: x + dx[i], y: y + dy[i]) {
                return true
            }
        }
        return false
    }

    return isValid(x: 0, y: n - 1) && outcomeMatrix[0][n - 1] == .playedCorrectly // Start from upper right
}
